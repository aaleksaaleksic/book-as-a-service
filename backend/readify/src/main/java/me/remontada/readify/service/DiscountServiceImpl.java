package me.remontada.readify.service;

import lombok.extern.slf4j.Slf4j;
import me.remontada.readify.model.Discount;
import me.remontada.readify.model.User;
import me.remontada.readify.repository.DiscountRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.security.SecureRandom;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Slf4j
@Service
@Transactional
public class DiscountServiceImpl implements DiscountService {

    private static final int PUBLIC_DISCOUNT_PERCENTAGE = 10;
    private static final int DISCOUNT_VALIDITY_DAYS = 5;
    private static final LocalDate PUBLIC_GENERATOR_END_DATE = LocalDate.of(2025, 11, 10);
    private static final SecureRandom RANDOM = new SecureRandom();

    private final DiscountRepository discountRepository;
    private final EmailService emailService;

    @Autowired
    public DiscountServiceImpl(DiscountRepository discountRepository, EmailService emailService) {
        this.discountRepository = discountRepository;
        this.emailService = emailService;
    }

    @Override
    public Discount generatePublicDiscount(String email) {
        // Check if public generator is still available
        if (!isPublicGeneratorAvailable()) {
            throw new RuntimeException("Javni generator popust kodova je istekao. Dostupan je bio do 10. novembra 2025.");
        }

        // Validate email
        if (email == null || email.trim().isEmpty() || !email.matches("^[A-Za-z0-9+_.-]+@(.+)$")) {
            throw new IllegalArgumentException("Nevažeća email adresa");
        }

        // Check if user already has an active discount
        long activeDiscounts = discountRepository.countActiveDiscountsByEmail(email, LocalDateTime.now());
        if (activeDiscounts > 0) {
            throw new RuntimeException("Vec imate aktivan kod popusta za ovu email adresu");
        }

        // Generate unique 6-digit code
        String code = generateUniqueCode();

        // Create discount
        Discount discount = Discount.builder()
                .email(email.toLowerCase().trim())
                .code(code)
                .discountPercentage(PUBLIC_DISCOUNT_PERCENTAGE)
                .expiresAt(LocalDateTime.now().plusDays(DISCOUNT_VALIDITY_DAYS))
                .type(Discount.DiscountType.PUBLIC)
                .isUsed(false)
                .build();

        Discount savedDiscount = discountRepository.save(discount);

        // Send email
        try {
            emailService.sendDiscountCode(
                    email,
                    code,
                    PUBLIC_DISCOUNT_PERCENTAGE,
                    savedDiscount.getExpiresAt()
            );
            log.info("Public discount code {} generated for email: {}", code, email);
        } catch (Exception e) {
            log.error("Failed to send discount email to: {}", email, e);
            // Don't throw - discount is already created
        }

        return savedDiscount;
    }

    @Override
    public Discount generateAdminDiscount(String email, Integer discountPercentage, User admin) {
        // Validate email
        if (email == null || email.trim().isEmpty() || !email.matches("^[A-Za-z0-9+_.-]+@(.+)$")) {
            throw new IllegalArgumentException("Nevažeća email adresa");
        }

        // Validate discount percentage
        if (discountPercentage == null || discountPercentage < 10 || discountPercentage > 100 || discountPercentage % 10 != 0) {
            throw new IllegalArgumentException("Procenat popusta mora biti između 10 i 100, u koracima od 10");
        }

        // Generate unique 6-digit code
        String code = generateUniqueCode();

        // Create discount
        Discount discount = Discount.builder()
                .email(email.toLowerCase().trim())
                .code(code)
                .discountPercentage(discountPercentage)
                .expiresAt(LocalDateTime.now().plusDays(DISCOUNT_VALIDITY_DAYS))
                .type(Discount.DiscountType.ADMIN)
                .createdBy(admin)
                .isUsed(false)
                .build();

        Discount savedDiscount = discountRepository.save(discount);

        // Send email
        try {
            emailService.sendDiscountCode(
                    email,
                    code,
                    discountPercentage,
                    savedDiscount.getExpiresAt()
            );
            log.info("Admin discount code {} generated by {} for email: {}, discount: {}%",
                    code, admin.getEmail(), email, discountPercentage);
        } catch (Exception e) {
            log.error("Failed to send discount email to: {}", email, e);
            // Don't throw - discount is already created
        }

        return savedDiscount;
    }

    @Override
    @Transactional(readOnly = true)
    public Optional<Discount> validateDiscount(String code, String email) {
        if (code == null || code.trim().isEmpty()) {
            return Optional.empty();
        }

        if (email == null || email.trim().isEmpty()) {
            return Optional.empty();
        }

        Optional<Discount> discountOpt = discountRepository.findByCodeAndEmail(
                code.trim().toUpperCase(),
                email.toLowerCase().trim()
        );

        if (discountOpt.isEmpty()) {
            log.warn("Discount code {} not found for email: {}", code, email);
            return Optional.empty();
        }

        Discount discount = discountOpt.get();

        // Check if already used
        if (discount.getIsUsed()) {
            log.warn("Discount code {} already used by: {}", code, email);
            return Optional.empty();
        }

        // Check if expired
        if (discount.isExpired()) {
            log.warn("Discount code {} expired for: {}", code, email);
            return Optional.empty();
        }

        return Optional.of(discount);
    }

    @Override
    public void useDiscount(String code, String email) {
        Optional<Discount> discountOpt = validateDiscount(code, email);

        if (discountOpt.isEmpty()) {
            throw new RuntimeException("Nevažeći ili istekli kod popusta");
        }

        Discount discount = discountOpt.get();
        discount.markAsUsed();
        discountRepository.save(discount);

        log.info("Discount code {} used by: {}", code, email);
    }

    @Override
    public boolean isPublicGeneratorAvailable() {
        return LocalDate.now().isBefore(PUBLIC_GENERATOR_END_DATE) ||
                LocalDate.now().isEqual(PUBLIC_GENERATOR_END_DATE);
    }

    @Override
    @Scheduled(cron = "0 0 2 * * ?") // Run at 2 AM every day
    public void cleanupExpiredDiscounts() {
        List<Discount> expiredDiscounts = discountRepository.findExpiredUnusedDiscounts(LocalDateTime.now());

        if (!expiredDiscounts.isEmpty()) {
            log.info("Cleaning up {} expired discount codes", expiredDiscounts.size());
            discountRepository.deleteAll(expiredDiscounts);
        }
    }

    @Override
    @Transactional(readOnly = true)
    public List<Discount> getAllDiscounts() {
        return discountRepository.findAll();
    }

    /**
     * Generate a unique 6-digit alphanumeric code
     */
    private String generateUniqueCode() {
        String code;
        int attempts = 0;
        int maxAttempts = 100;

        do {
            code = generateRandomCode();
            attempts++;

            if (attempts > maxAttempts) {
                throw new RuntimeException("Failed to generate unique discount code after " + maxAttempts + " attempts");
            }
        } while (discountRepository.existsByCode(code));

        return code;
    }

    /**
     * Generate a random 6-digit alphanumeric code
     */
    private String generateRandomCode() {
        String characters = "ABCDEFGHJKLMNPQRSTUVWXYZ23456789"; // Excluding confusing characters (I, O, 0, 1)
        StringBuilder code = new StringBuilder(6);

        for (int i = 0; i < 6; i++) {
            code.append(characters.charAt(RANDOM.nextInt(characters.length())));
        }

        return code.toString();
    }
}
